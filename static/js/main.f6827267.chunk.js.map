{"version":3,"sources":["assets/twitter-logo.svg","App.js","index.js"],"names":["TWITTER_HANDLE","TWITTER_LINK","CONTRACT_ADDRESS","App","useState","currentAccount","setCurrentAccount","count","setCount","minting","setMinting","opensea","setOpensea","etherscan","setEtherscan","buttonText","setButtonText","getCount","a","window","ethereum","provider","ethers","providers","Web3Provider","signer","getSigner","connectedContract","Contract","myEpicNft","abi","c","console","log","toString","checkIfWalletIsConnected","request","method","accounts","length","account","setupEventListener","connectWallet","alert","on","from","tokenId","toNumber","error","askContractToMintNft","makeAnEpicNFT","nftTxn","wait","hash","useEffect","className","onClick","href","target","alt","src","twitterLogo","rel","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f6827267.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/twitter-logo.a8a75254.svg\";","import \"./styles/App.css\";\nimport twitterLogo from \"./assets/twitter-logo.svg\";\nimport React, { useEffect, useState } from \"react\";\nimport { ethers } from \"ethers\";\nimport myEpicNft from \"./utils/MyEpicNFT.json\";\n// Constants\nconst TWITTER_HANDLE = \"_buildspace\";\nconst TWITTER_LINK = `https://twitter.com/${TWITTER_HANDLE}`;\nconst OPENSEA_LINK = \"\";\nconst TOTAL_MINT_COUNT = 50;\nconst CONTRACT_ADDRESS = \"0xD198A59A4125d409cCc666551a9a36D496a25803\";\n\nconst App = () => {\n  const [currentAccount, setCurrentAccount] = useState(\"\");\n  const [count, setCount] = useState(0);\n  const [minting, setMinting] = useState(false);\n  const [opensea, setOpensea] = useState(\"\");\n  const [etherscan, setEtherscan] = useState(\"\");\n  const [buttonText, setButtonText] = useState(\"Mint NFT💎\");\n  const getCount = async () => {\n    const { ethereum } = window;\n    const provider = new ethers.providers.Web3Provider(ethereum);\n    const signer = provider.getSigner();\n    const connectedContract = new ethers.Contract(\n      CONTRACT_ADDRESS,\n      myEpicNft.abi,\n      signer\n    );\n\n    let c = await connectedContract.getCount();\n    console.log(c.toString());\n    setCount(c.toString());\n  };\n\n  const checkIfWalletIsConnected = async () => {\n    const { ethereum } = window;\n\n    if (!ethereum) {\n      console.log(\"Make sure you have metamask!\");\n      return;\n    } else {\n      console.log(\"We have the ethereum object\", ethereum);\n    }\n\n    /*\n     * Check if we're authorized to access the user's wallet\n     */\n    const accounts = await ethereum.request({ method: \"eth_accounts\" });\n\n    /*\n     * User can have multiple authorized accounts, we grab the first one if its there!\n     */\n    if (accounts.length !== 0) {\n      const account = accounts[0];\n      console.log(\"Found an authorized account:\", account);\n      setCurrentAccount(account);\n\n      // Setup listener! This is for the case where a user comes to our site\n      // and ALREADY had their wallet connected + authorized.\n      setupEventListener();\n    } else {\n      console.log(\"No authorized account found\");\n    }\n  };\n\n  /*\n   * Implement your connectWallet method here\n   */\n  const connectWallet = async () => {\n    try {\n      const { ethereum } = window;\n\n      if (!ethereum) {\n        alert(\"Get MetaMask!\");\n        return;\n      }\n\n      /*\n       * Fancy method to request access to account.\n       */\n      const accounts = await ethereum.request({\n        method: \"eth_requestAccounts\",\n      });\n\n      /*\n       * Boom! This should print out public address once we authorize Metamask.\n       */\n      console.log(\"Connected\", accounts[0]);\n      setCurrentAccount(accounts[0]);\n\n      // Setup listener! This is for the case where a user comes to our site\n      // and ALREADY had their wallet connected + authorized.\n      setupEventListener();\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  // Setup our listener.\n  const setupEventListener = async () => {\n    // Most of this looks the same as our function askContractToMintNft\n    try {\n      const { ethereum } = window;\n\n      if (ethereum) {\n        // Same stuff again\n        const provider = new ethers.providers.Web3Provider(ethereum);\n        const signer = provider.getSigner();\n        const connectedContract = new ethers.Contract(\n          CONTRACT_ADDRESS,\n          myEpicNft.abi,\n          signer\n        );\n\n        // THIS IS THE MAGIC SAUCE.\n        // This will essentially \"capture\" our event when our contract throws it.\n        // If you're familiar with webhooks, it's very similar to that!\n        connectedContract.on(\"NewEpicNFTMinted\", (from, tokenId) => {\n          console.log(from, tokenId.toNumber());\n          getCount();\n          setOpensea(\n            `https://testnets.opensea.io/assets/${CONTRACT_ADDRESS}/${tokenId.toNumber()}`\n          );\n        });\n        getCount();\n        console.log(\"Setup event listener!\");\n      } else {\n        console.log(\"Ethereum object doesn't exist!\");\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  const askContractToMintNft = async () => {\n    try {\n      const { ethereum } = window;\n\n      if (ethereum) {\n        const provider = new ethers.providers.Web3Provider(ethereum);\n        const signer = provider.getSigner();\n        const connectedContract = new ethers.Contract(\n          CONTRACT_ADDRESS,\n          myEpicNft.abi,\n          signer\n        );\n\n        console.log(\"Going to pop wallet now to pay gas...\");\n\n        setButtonText(\"Opening Metamask\");\n        let nftTxn = await connectedContract.makeAnEpicNFT();\n        setButtonText(\"Mint NFT💎\");\n        setMinting(true);\n        console.log(\"Mining...please wait.\");\n        await nftTxn.wait();\n        setEtherscan(`https://rinkeby.etherscan.io/tx/${nftTxn.hash}`);\n        setMinting(false);\n      } else {\n        console.log(\"Ethereum object doesn't exist!\");\n      }\n    } catch (error) {\n      console.log(error);\n      setMinting(false);\n      alert(\"Try Again Later\");\n    }\n  };\n  // Render Methods\n  const renderNotConnectedContainer = () => (\n    <button\n      onClick={connectWallet}\n      className=\"cta-button connect-wallet-button\"\n    >\n      Connect to Wallet\n    </button>\n  );\n\n  /*\n   * This runs our function when the page loads.\n   */\n  useEffect(() => {\n    checkIfWalletIsConnected();\n  }, []);\n\n  return (\n    <div className=\"App\">\n      <div className=\"container\">\n        <div className=\"header-container\">\n          <p className=\"header gradient-text\">My NFT Collection</p>\n          {currentAccount && (\n            <div className=\"acc-details\">\n              <p className=\"address\">Account:{currentAccount}</p>\n              <p className=\"address\">Your NFTs:{count}/50</p>\n            </div>\n          )}\n          <p className=\"sub-text\">\n            Each unique. Each beautiful. Discover your NFT today.\n          </p>\n          {currentAccount === \"\" ? (\n            renderNotConnectedContainer()\n          ) : (\n            <button\n              onClick={askContractToMintNft}\n              className={`cta-button connect-wallet-button ${\n                minting ? \"minting\" : \"\"\n              }`}\n            >\n              {minting ? `Minting..⛏️` : buttonText}\n            </button>\n          )}\n          {opensea && (\n            <div\n              className={`mined-details ${etherscan ? \"mined-animation\" : \"\"}`}\n            >\n              {etherscan && (\n                <a className=\"external-links\" href={etherscan} target=\"_blank\">\n                  Transaction🚀\n                </a>\n              )}\n              <br />\n              {opensea && (\n                <a className=\"external-links\" href={opensea} target=\"_blank\">\n                  Opensea 🌊\n                </a>\n              )}\n            </div>\n          )}\n        </div>\n        <div className=\"footer-container\">\n          <img alt=\"Twitter Logo\" className=\"twitter-logo\" src={twitterLogo} />\n          <a\n            className=\"footer-text\"\n            href={TWITTER_LINK}\n            target=\"_blank\"\n            rel=\"noreferrer\"\n          >{`built on @${TWITTER_HANDLE}`}</a>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './styles/index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}