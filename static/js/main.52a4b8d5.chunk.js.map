{"version":3,"sources":["assets/twitter-logo.svg","App.js","index.js"],"names":["TWITTER_HANDLE","TWITTER_LINK","CONTRACT_ADDRESS","App","useState","currentAccount","setCurrentAccount","count","setCount","minting","setMinting","alertHead","setAlertHead","alertText","setAlertText","opensea","setOpensea","etherscan","setEtherscan","buttonText","setButtonText","getCount","a","window","ethereum","provider","ethers","providers","Web3Provider","signer","getSigner","connectedContract","Contract","myEpicNft","abi","c","console","log","toString","checkNetwork","request","method","chainId","checkIfWalletIsConnected","accounts","length","account","setupEventListener","connectWallet","on","from","tokenId","toNumber","error","askContractToMintNft","makeAnEpicNFT","nftTxn","wait","hash","useEffect","setTimeout","className","onClick","href","target","alt","src","twitterLogo","rel","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.52a4b8d5.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/twitter-logo.a8a75254.svg\";","import \"./styles/App.css\";\nimport twitterLogo from \"./assets/twitter-logo.svg\";\nimport React, { useEffect, useState } from \"react\";\nimport { ethers } from \"ethers\";\nimport myEpicNft from \"./utils/MyEpicNFT.json\";\n// Constants\nconst TWITTER_HANDLE = \"_buildspace\";\nconst TWITTER_LINK = `https://twitter.com/${TWITTER_HANDLE}`;\nconst OPENSEA_LINK = \"\";\nconst TOTAL_MINT_COUNT = 50;\nconst CONTRACT_ADDRESS = \"0xD198A59A4125d409cCc666551a9a36D496a25803\";\n\nconst App = () => {\n  const [currentAccount, setCurrentAccount] = useState(\"\");\n  const [count, setCount] = useState(0);\n  const [minting, setMinting] = useState(false);\n  const [alertHead, setAlertHead] = useState(false);\n  const [alertText, setAlertText] = useState(\"\");\n\n  const [opensea, setOpensea] = useState(\"\");\n  const [etherscan, setEtherscan] = useState(\"\");\n  const [buttonText, setButtonText] = useState(\"Mint NFT💎\");\n  const getCount = async () => {\n    const { ethereum } = window;\n    const provider = new ethers.providers.Web3Provider(ethereum);\n    const signer = provider.getSigner();\n    const connectedContract = new ethers.Contract(\n      CONTRACT_ADDRESS,\n      myEpicNft.abi,\n      signer\n    );\n\n    let c = await connectedContract.getCount();\n    console.log(c.toString());\n    setCount(c.toString());\n  };\n\n  const checkNetwork = async () => {\n    const { ethereum } = window;\n\n    let chainId = await ethereum.request({ method: \"eth_chainId\" });\n    console.log(\"Connected to chain \" + chainId);\n\n    // String, hex code of the chainId of the Rinkebey test network\n    const rinkebyChainId = \"0x4\";\n    if (chainId !== rinkebyChainId) {\n      setAlertHead(true);\n      setAlertText(\"You are not connected to the Rinkeby Test Network!\");\n    }\n  };\n\n  const checkIfWalletIsConnected = async () => {\n    const { ethereum } = window;\n\n    if (!ethereum) {\n      setAlertHead(true);\n      setAlertText(\"Get MetaMask!\");\n      return;\n    } else {\n      console.log(\"We have the ethereum object\", ethereum);\n    }\n\n    /*\n     * Check if we're authorized to access the user's wallet\n     */\n    const accounts = await ethereum.request({ method: \"eth_accounts\" });\n\n    /*\n     * User can have multiple authorized accounts, we grab the first one if its there!\n     */\n    if (accounts.length !== 0) {\n      const account = accounts[0];\n      console.log(\"Found an authorized account:\", account);\n      setCurrentAccount(account);\n      checkNetwork();\n      // Setup listener! This is for the case where a user comes to our site\n      // and ALREADY had their wallet connected + authorized.\n      setupEventListener();\n    } else {\n      console.log(\"No authorized account found\");\n    }\n  };\n\n  /*\n   * Implement your connectWallet method here\n   */\n  const connectWallet = async () => {\n    try {\n      const { ethereum } = window;\n\n      if (!ethereum) {\n        setAlertHead(true);\n        setAlertText(\"Get MetaMask!\");\n        return;\n      }\n\n      /*\n       * Fancy method to request access to account.\n       */\n      const accounts = await ethereum.request({\n        method: \"eth_requestAccounts\",\n      });\n\n      /*\n       * Boom! This should print out public address once we authorize Metamask.\n       */\n      console.log(\"Connected\", accounts[0]);\n      setCurrentAccount(accounts[0]);\n      checkNetwork();\n      // Setup listener! This is for the case where a user comes to our site\n      // and ALREADY had their wallet connected + authorized.\n      setupEventListener();\n    } catch (error) {\n      console.log(error);\n      setAlertText(\"Unable to connect Wallet\");\n      setAlertHead(true);\n    }\n  };\n\n  // Setup our listener.\n  const setupEventListener = async () => {\n    // Most of this looks the same as our function askContractToMintNft\n    try {\n      const { ethereum } = window;\n\n      if (ethereum) {\n        // Same stuff again\n        const provider = new ethers.providers.Web3Provider(ethereum);\n        const signer = provider.getSigner();\n        const connectedContract = new ethers.Contract(\n          CONTRACT_ADDRESS,\n          myEpicNft.abi,\n          signer\n        );\n\n        // THIS IS THE MAGIC SAUCE.\n        // This will essentially \"capture\" our event when our contract throws it.\n        // If you're familiar with webhooks, it's very similar to that!\n        connectedContract.on(\"NewEpicNFTMinted\", (from, tokenId) => {\n          console.log(from, tokenId.toNumber());\n          getCount();\n          setOpensea(\n            `https://testnets.opensea.io/assets/${CONTRACT_ADDRESS}/${tokenId.toNumber()}`\n          );\n        });\n        getCount();\n        console.log(\"Setup event listener!\");\n      } else {\n        setAlertText(\"Ethereum object doesn't exist!\");\n        setAlertHead(true);\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  const askContractToMintNft = async () => {\n    try {\n      const { ethereum } = window;\n      setEtherscan(\"\");\n      setOpensea(\"\");\n      if (ethereum) {\n        const provider = new ethers.providers.Web3Provider(ethereum);\n        const signer = provider.getSigner();\n        const connectedContract = new ethers.Contract(\n          CONTRACT_ADDRESS,\n          myEpicNft.abi,\n          signer\n        );\n\n        console.log(\"Going to pop wallet now to pay gas...\");\n\n        setButtonText(\"Opening Metamask\");\n        let nftTxn = await connectedContract.makeAnEpicNFT();\n        setButtonText(\"Mint NFT💎\");\n        setMinting(true);\n        console.log(\"Mining...please wait.\");\n        setAlertHead(false);\n\n        await nftTxn.wait();\n        setEtherscan(`https://rinkeby.etherscan.io/tx/${nftTxn.hash}`);\n        setMinting(false);\n      } else {\n        console.log(\"Ethereum object doesn't exist!\");\n      }\n    } catch (error) {\n      console.log(error);\n      setMinting(false);\n      setAlertText(\"Try Again Later\");\n      setAlertHead(true);\n    }\n  };\n  // Render Methods\n  const renderNotConnectedContainer = () => (\n    <button\n      onClick={connectWallet}\n      className=\"cta-button connect-wallet-button\"\n    >\n      Connect to Wallet\n    </button>\n  );\n\n  /*\n   * This runs our function when the page loads.\n   */\n  useEffect(() => {\n    checkIfWalletIsConnected();\n  }, []);\n\n  useEffect(() => {\n    setTimeout(() => {\n      setAlertHead(false);\n    }, 10000);\n  }, [alertHead]);\n\n  return (\n    <div className=\"App\">\n      <div className=\"container\">\n        <div className={`fixed-container ${alertHead ? \"add-alert\" : \"\"}`}>\n          <p>{alertText}</p>\n        </div>\n        {/* <button onClick={() => setAlertHead(true)}>alert</button> */}\n        <div className=\"header-container\">\n          <p className=\"header gradient-text\">My NFT Collection</p>\n          {currentAccount && (\n            <div className=\"acc-details\">\n              <p className=\"address\">Account:{currentAccount}</p>\n              <p className=\"address\">Your NFTs:{count}/50</p>\n            </div>\n          )}\n          <p className=\"sub-text\">\n            Each unique. Each beautiful. Discover your NFT today.\n          </p>\n          {currentAccount === \"\" ? (\n            renderNotConnectedContainer()\n          ) : (\n            <button\n              onClick={askContractToMintNft}\n              className={`cta-button connect-wallet-button ${\n                minting ? \"minting\" : \"\"\n              }`}\n            >\n              {minting ? `Minting..⛏️` : buttonText}\n            </button>\n          )}\n          {opensea && (\n            <div\n              className={`mined-details ${etherscan ? \"mined-animation\" : \"\"}`}\n            >\n              {etherscan && (\n                <a className=\"external-links\" href={etherscan} target=\"_blank\">\n                  Transaction🚀\n                </a>\n              )}\n              <br />\n              {opensea && (\n                <a className=\"external-links\" href={opensea} target=\"_blank\">\n                  Opensea 🌊\n                </a>\n              )}\n            </div>\n          )}\n        </div>\n        <div className=\"footer-container\">\n          <img alt=\"Twitter Logo\" className=\"twitter-logo\" src={twitterLogo} />\n          <a\n            className=\"footer-text\"\n            href={TWITTER_LINK}\n            target=\"_blank\"\n            rel=\"noreferrer\"\n          >{`built on @${TWITTER_HANDLE}`}</a>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './styles/index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}